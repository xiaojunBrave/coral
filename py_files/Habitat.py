# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Habitat.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtWidgets import QMessageBox

from utility.guet_judge import GuetJudge


class Habitat(QtWidgets.QMainWindow):
    hb_signal = pyqtSignal(object)

    def __init__(self, parent=None):
        super(Habitat, self).__init__(parent)
        self.setupUi(self)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 360)
        MainWindow.setMinimumSize(QtCore.QSize(400, 360))
        MainWindow.setMaximumSize(QtCore.QSize(400, 360))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.horizontalLayout.setStretch(0, 7)
        self.horizontalLayout.setStretch(1, 3)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.horizontalLayout_2.setStretch(0, 7)
        self.horizontalLayout_2.setStretch(1, 3)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton.setMaximumSize(QtCore.QSize(100, 50))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_5.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.InputEvent)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "栖息地版块"))
        self.label.setText(_translate("MainWindow", "大型底栖藻类盖度%:"))
        self.label_2.setText(_translate("MainWindow", "5年内活珊瑚礁盖度减少的数量%:"))
        self.pushButton.setText(_translate("MainWindow", "输入"))

    def InputEvent(self):
        result = QMessageBox.question(self, "注意", "您确定好输入的参数了吗",
                                      QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        attribute1 = self.lineEdit.text()  # 大型底栖藻类盖度
        attribute2 = self.lineEdit_2.text()  # 5年内活珊瑚礁盖度减少的数量
        b = True
        if result == QMessageBox.Yes:
            if ((len(attribute1) == 0) or (len(attribute2) == 0)):
                attribute1 = float(0)
                attribute2 = float(0)
                b = False
                QMessageBox.critical(self, "错误", "无法进行珊瑚礁健康评价，缺少栖息地版块参数")
            else:
                # 判断是否输入的都是数字
                if (GuetJudge.is_number(attribute1) and GuetJudge.is_number(attribute2)):
                    QMessageBox.information(self, "通知", "成功输入数据")
                    attribute1 = float(attribute1)
                    attribute2 = float(attribute2)
                    self.close()
                else:
                    QMessageBox.critical(self, "错误", "请输入正确类型的参数")
            hb = HB(attribute1, attribute2, b)
            self.hb_signal.emit(hb)
        elif result == QMessageBox.No:
            pass

    def evaluate(self):
        attribute1 = float(self.lineEdit.text())  # 大型底栖藻类盖度
        attribute2 = float(self.lineEdit_2.text())  # 5年内活珊瑚礁盖度减少的数量
        attribute1_score = 5 if (attribute1 > 10) else (15 if (5 < attribute1 < 10) else 20)
        attribute2_score = 5 if (attribute2 > 10) else (15 if (5 < attribute2 < 10) else 20)
        hb_score = attribute1_score + attribute2_score
        return hb_score / 2

class HB:
    def __init__(self, attribute1, attribute2, b):
        self.attribute1 = attribute1
        self.attribute2 = attribute2
        self.b = b
